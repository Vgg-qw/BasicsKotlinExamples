package org.example.collections

fun main(){

}

/*+
    Напиши функцию, которая принимает список чисел.
    Находит максимальное, минимальное, количество всех чисел и сумму всех чисел
    И возвращает этот результат в виде Map<String, Int>
*/

fun listInfo(list : List<Int>) : Map<String, Int>{
    return mapOf()
}

/*
    Напишите функцию,
    которая принимает список цен на товары в магазине и возвращает общую сумму покупки.
    Добавьте скидку 10%, если общая сумма превышает 1000 рублей.
 */

fun calculateTotal(){

}

/*
    Напишите функцию,
    которая принимает два списка товара (название и цена) и
    возвращает название самого дорогого товара.
    Ценны и название товаров должны быть разные.
 */

fun findMostExpensiveProduct() {

}

/*
    Напишите функцию,
    которая принимает два списка друзей (например, из разных социальных сетей) и
    объединяет их в один список, удаляя дубликаты.
 */

fun mergeFriends(list1: List<String>, list2: List<String>): List<String> {
    return listOf()
}

/*
    Создайте функцию, которая возвращает частоту каждого символа в строке.
    И возвращает Map состоящий из символа и количества этого семвола в строке.
    Например:
    text = hello
    map = {h=1, e=1, l=2, o=1}
 */
fun countCharacters(text : String){

}


/*
    Напишите функцию,
    которая реализует шифр Цезаря.
    Функция должна принимать строку и сдвиг,
    а затем возвращать зашифрованную строку.
    Пример:
    Входной текст: "Hello, World!"
    Сдвиг: 3
    Зашифрованный текст: "Khoor, Zruog!"
 */
fun caesarCipher(){

}

/*
    У вас есть список городов.
    Нужно выполнить серию манипуляций с этим списком, чтобы в итоге остался только один город.
    Этот город нужно вернуть из функции.
Манипуляции:
    1. Удалить города, названия которых начинаются на букву "С".
    2. Оставить только города, в названии которых больше 8 букв.
    3. Удалить города в название которых есть дефис (-)
    4. Отсортировать города в алфавитном порядке.
    5. Удалить первый и последний город из отсортированного списка.
 */

fun findLastCity(): String{
    val cities = listOf(
        "Москва", "Санкт-Петербург", "Новосибирск", "Екатеринбург", "Казань",
        "Нижний-Новгород", "Челябинск", "Самара", "Омск", "Ростов-на-Дону"
    )

    return ""
}

/*
    Напишите консольную программу которая хранит в себе список покупок.
    Чтобы добавить новую покупку пользователь должен ввести: Добавить, после чего ввести название продукта.
    Чтобы вывести список покупок пользователь должен ввести: Список.
    Чтобы удалить товар из списка пользователь должен ввести: Удалить, после чего ввести название продукта.
    Чтобы выйти из программы пользователь должен ввести: Выйти.
 */

fun shoppingList(){

}

/*
    Создать игру из нескольких функций
    1) Сделать функцию,
        которая генерирует «карту» случайным образом,
        где спрятаны разные предметы (сокровища, монстры, ловушки) в случайных местах.
        val contents = listOf("Пусто", "Сокровище", "Монстр", "Ловушка")
        Отобразить карту на экране
        (например, выводить символы: . для пустого, T для сокровища, M для монстра, X для ловушки).
        Пример карты:

        . T . . X . . . M .
        . . . . X . . T . T
        . . T . . . T . X .
        . . X M . T X . M .
        . T . . . X . T . M

 */

fun generateGameMap() : MutableList<MutableList<Char>>{
    val gameMap : MutableList<MutableList<Char>> = mutableListOf()
    // Ваш код
    return gameMap
}

/*
    2) Создать функцию gameStart(),
        которая отвечает за игровой процесс,
        1. функция получает карту из функции generateGameMap()
        2. функция хранит инвентарь игрока
            val inventory = mutableListOf<String>()
        3. функция хранит текущие координаты игрока
            var x = 0
            var y = 0
        4. функция хранит текущее здоровье и атаку игрока,
            если здоровье равно 0 игрок погибает, игра заканчивается
            var hp = 3
        5. функция отвечает за перемещение игрока по карте,
            для этого игрок должен написать в консоль в каком из 4-х направлений он хочет пойти
            Вперед, Назад, Влево, Вправо
        6. Как только игрок наступает на что-то что не является пустым пространством, вызывается одна из
            следующих функций:
            fun monsterFight() - для битвы с монстром
            fun getTreasure() - для получения случайного сокровища
            fun steppedTrap() - когда игрок попался в ловушку
        7. Если у игрока есть предмет в инвентаре, вместо того чтобы походить по координатам,
           он может воспользоваться предметом, после применения предмет убирается из инвентаря
 */

fun gameStart(){
    // Ващ код
}

/*
    Бой между игроком и монстром происходит следующим образом:
    игрок и монстер по очереди кидают кубик
    если у игрока число на кубике больше то игрок побеждает, выход из функции
    если у монстра число больше то у игрока отнимается одна жизнь
    если у игрока больше нет жизней выход из функции, игра закончена, игрок проиграл
 */

fun monsterFight(hp : Int) : Int{
    // Ваш код
    return hp
}

/*
    Реализуйте получение случайного предмета в инвентарь,
    придумайте название и функции предмета самостоятельно,
    например должен быть хотя бы один предмет восстанавливающий здоровье игроку
 */

fun getTreasure(inventory : MutableList<String>) : MutableList<String>{
    //  Ваш код
    return inventory
}
/*
    Реализуйте механику когда игрок попал в ловушку самостоятельно,
    (например когда игрок попал в ловушку у него убирается один предмет из инвентаря)
 */
fun steppedTrap(){
    // Ваш код
}