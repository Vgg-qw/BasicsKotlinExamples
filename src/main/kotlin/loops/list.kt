package loops

// Определение коллекций в Kotlin:
// Коллекции — это структуры данных, которые могут содержать несколько элементов одного типа (или разных типов с использованием обобщений).
// В Kotlin коллекции бывают неизменяемыми (Immutable) и изменяемыми (Mutable).
// Коллекция `List` — это упорядоченный набор элементов, доступ к которым осуществляется по индексу.
// Элементы списка могут повторяться, и каждый элемент имеет индекс, начиная с 0.

fun main(){

}

fun listExamples() {
    // Неизменяемый список (Immutable List):
    // Это список, который нельзя изменять после его создания. Элементы нельзя добавлять, удалять или изменять.
    val fruits: List<String> = listOf("Apple", "Banana", "Orange")

    // Доступ к элементам по индексу
    // В неизменяемом и изменяемом списке можно получать элементы с помощью индексов, начиная с 0.
    println(fruits[0])  // Вывод: Apple
    println(fruits[1])  // Вывод: Banana
    println(fruits[2])  // Вывод: Orange

    // Перебор элементов списка с использованием цикла forEach
    // Мы можем пройтись по всем элементам списка и вывести их на экран.

    fruits.forEach { fruit ->
        println(fruit)
    }

    // Изменяемый список (Mutable List):
    // Это список, который можно изменять после создания — можно добавлять, удалять и изменять элементы.
    val mutableFruits: MutableList<String> = mutableListOf("Apple", "Banana")

    // Добавление элемента в список
    // В изменяемом списке можно добавлять элементы с помощью метода add().
    mutableFruits.add("Orange")  // Теперь список: ["Apple", "Banana", "Orange"]

    // Изменение элемента по индексу
    // Изменяемый список позволяет изменять существующие элементы.
    mutableFruits[1] = "Blueberry"  // Теперь список: ["Apple", "Blueberry", "Orange"]

    // Удаление элемента по значению
    // Мы можем удалить элемент из изменяемого списка с помощью метода remove().
    mutableFruits.remove("Apple")  // Теперь список: ["Blueberry", "Orange"]

    println(mutableFruits)  // Вывод: [Blueberry, Orange]

    // Фильтрация и маппинг — сложные операции над списками:
    // В Kotlin есть удобные функции для работы с коллекциями, такие как фильтрация и преобразование элементов.

    val numbers = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9)

    // Фильтрация списка:
    // Метод filter() возвращает новый список, содержащий только те элементы, которые удовлетворяют условию.
    val evenNumbers = numbers.filter { it % 2 == 0 }  // Оставляем только чётные числа
    println(evenNumbers)  // Вывод: [2, 4, 6, 8]

    // Маппинг (преобразование элементов):
    // Метод map() применяет указанную функцию к каждому элементу списка и возвращает новый список с результатами.
    val squaredNumbers = numbers.map { it * it }  // Преобразуем каждый элемент в его квадрат
    println(squaredNumbers)  // Вывод: [1, 4, 9, 16, 25, 36, 49, 64, 81]
}
